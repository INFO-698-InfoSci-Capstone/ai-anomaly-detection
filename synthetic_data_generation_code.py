# -*- coding: utf-8 -*-
"""Synthetic_data_generation_code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CD2SvVHg9bya7hxnMtI8iFYH6SKS6hyL
"""

!pip install faker

import pandas as pd
import numpy as np
from faker import Faker
import random
from datetime import datetime, timedelta
from math import log2

fake = Faker()

# --- Constants ---
ATTACK_TYPES = {
    "T1190": "Exploit Public-Facing Application",
    "T1110": "Brute Force",
    "T1071": "Command and Control",
    "T1059": "Command-Line Interface",
    "T1027": "Obfuscated Files",
    "T1210": "Exploit Remote Services",
    "T1046": "Network Service Scanning",
    "T1133": "External Remote Services"
}

MALWARE_INDICATORS = ["Mirai", "Emotet", "TrickBot", "Ryuk", "Zero-Day", "Ransomware", "Spyware", "Keylogger", None]
PROTOCOLS = ["TCP", "UDP", "ICMP", "HTTP", "HTTPS", "DNS", "SSH", "FTP", "SMTP", "RDP"]
TRAFFIC_TYPES = ["Brute Force", "Exploit", "DDoS", "Phishing", "Data Exfiltration", "Normal", "Scanning"]
PACKET_TYPES = ["Threat", "Suspicious", "Normal", "Malware", "Scan"]
DEVICE_TYPES = ["Firewall", "IDS", "IPS", "Router", "Server", "Workstation"]
NETWORK_SEGMENTS = ["Corporate LAN", "DMZ", "Guest WiFi", "IoT Network", "Internal Network"]
LOG_SOURCES = ["Firewall", "IDS", "IPS", "Proxy Server", "SIEM"]
PROXY_INFO = ["No Proxy", "Proxy Detected", "TOR Exit Node", "Cloud Proxy"]

COUNTRIES_ASN = {
    "US": ("AS15169", "Google LLC"),
    "CN": ("AS4134", "CHINANET-BACKBONE"),
    "RU": ("AS12389", "ROSTELECOM"),
    "DE": ("AS3320", "Deutsche Telekom"),
    "IR": ("AS58224", "Iran Telecom"),
    "KP": ("AS131279", "Korea Internet Exchange"),
    "IN": ("AS4755", "TATA Communications")
}

# --- Helper Functions ---
def generate_ip(public=True):
    return fake.ipv4_public() if public else f"10.{random.randint(0, 255)}.{random.randint(0, 255)}.{random.randint(0, 255)}"

def generate_geo_data(ip):
    country = random.choice(list(COUNTRIES_ASN.keys()))
    asn, org = COUNTRIES_ASN[country]
    city = fake.city() if country != "KP" else "Pyongyang"
    return f"{country}, {city}, {asn}"

def generate_payload_data(is_threat=False):
    length = random.randint(100, 500) if is_threat else random.randint(50, 200)
    if random.random() > 0.7:
        # Simulate normal or malicious payload (higher entropy for threats)
        chars = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz0123456789', k=length)) if not is_threat else \
                ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+-=[]{}|;:,.<>?', k=length))
        return chars.encode('utf-8').hex()[:50]
    return None

def shannon_entropy(data):
    if not data:
        return 0
    freq = {byte: data.count(byte) / len(data) for byte in set(data)}
    return -sum(p * log2(p) for p in freq.values() if p > 0)

def generate_alert_signature():
    sig_type = random.choice(["SIG", "CVE"])
    return f"{sig_type}-{random.randint(1000, 9999)}"

# --- Log Generation ---
def generate_log_entry():
    timestamp = fake.date_time_between(start_date="-30d", end_date="now")
    src_ip = generate_ip(public=random.choice([True, False]))
    dst_ip = generate_ip(public=False)  # Assume internal

    # Threat Simulation (20% threat, 80% normal)
    is_threat = random.choices([True, False], weights=[0.2, 0.8])[0]

    if is_threat:
        attack_type = random.choice(list(ATTACK_TYPES.keys()))
        malware = random.choice(MALWARE_INDICATORS)
        anomaly_score = random.randint(50, 100)
        traffic_type = random.choice(["Brute Force", "Exploit", "DDoS", "Phishing", "Data Exfiltration", "Scanning"])
        packet_type = random.choice(["Threat", "Malware", "Scan"])
        flow_duration = random.uniform(0.01, 2)  # Short for attacks
        packet_count = random.randint(50, 500)   # High for attacks
        dest_port = random.choice([22, 80, 443, 3389, 53, 445, 1433])  # Attack-relevant ports
    else:
        attack_type = "N/A"
        malware = None
        anomaly_score = random.randint(0, 30)
        traffic_type = "Normal"
        packet_type = "Normal"
        flow_duration = random.uniform(0.1, 10)  # Longer for normal
        packet_count = random.randint(1, 50)     # Lower for normal
        dest_port = random.choice([80, 443, 53]) # Common ports

    payload = generate_payload_data(is_threat)

    return {
        "Timestamp": timestamp,
        "Source_IP_Address": src_ip,
        "Destination_IP_Address": dst_ip,
        "Source_Port": random.randint(1024, 65535),
        "Destination_Port": dest_port,
        "Protocol": random.choice(PROTOCOLS),
        "Packet_Length": random.randint(64, 1500) if not is_threat else random.randint(64, 1500),  # Varied for attacks
        "Packet_Count": packet_count,
        "Flow_Duration": flow_duration,
        "Payload_Entropy": shannon_entropy(payload) if payload else 0,
        "Packet_Type": packet_type,
        "Traffic_Type": traffic_type,
        "Malware_Indicators": malware,
        "Anomaly_Scores": anomaly_score,
        "Attack_Type": attack_type,
        "Device_Information": random.choice(DEVICE_TYPES),
        "Network_Segment": random.choice(NETWORK_SEGMENTS),
        "Geo_location_Data": generate_geo_data(src_ip),
        "Proxy_Information": random.choice(PROXY_INFO),
        "Log_Source": random.choice(LOG_SOURCES)
    }

# --- Generate 2000+ Logs ---
logs = [generate_log_entry() for _ in range(2000)]
df = pd.DataFrame(logs)

# --- Save & Preview ---
df.to_csv("cyber_threat_logs", index=False)
print(f"âœ… Generated {len(df)} logs with updated fields.")
print(df.head(3))